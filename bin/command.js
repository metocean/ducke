// Generated by CoffeeScript 1.8.0
var Docke, args, buildOptions, command, commands, docke, fs, minimist, options, url_parse, usage;

require('colors');

url_parse = require('url').parse;

fs = require('fs');

minimist = require('minimist');

Docke = require('../src/docke');

usage = "\nUsage: " + 'docke'.cyan + " command\n\nCommands:\n  \n  ping      Test the connection to docker\n  ps        List the running dockers and their ip addresses\n";

buildOptions = function(args) {
  var path, result;
  result = {
    host: url_parse(process.env.DOCKER_HOST || 'unix:///var/run/docker.sock'),
    port: process.env.DOCKER_PORT
  };
  if (process.env.DOCKER_TLS_VERIFY !== '' || false && (process.env.DOCKER_CERT_PATH != null)) {
    path = process.env.DOCKER_CERT_PATH;
    result.ca = fs.readFileSync("" + path + "/ca.pem");
    result.cert = fs.readFileSync("" + path + "/cert.pem");
    result.key = fs.readFileSync("" + path + "/key.pem");
    result.https = {
      cert: result.cert,
      key: result.key,
      ca: result.ca
    };
  }
  return result;
};

args = minimist(process.argv.slice(2), {
  "default": {
    'http-addr': '127.0.0.1:8500'
  }
});

if (args._.length === 0) {
  console.error(usage);
  process.exit(1);
}

options = buildOptions(args);

docke = new Docke(options);

commands = {
  ping: function() {
    return docke.ping(function(err, isUp) {
      if (err != null) {
        console.error(err);
        process.exit(1);
      }
      if (isUp) {
        return console.log('Docker is up'.green);
      } else {
        return console.error('Docker is down'.red);
      }
    });
  },
  ps: function() {
    return docke.ps(function(err, results) {
      var ip, result, _i, _len, _results;
      if (err != null) {
        console.error(err);
        process.exit(1);
      }
      _results = [];
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        result = results[_i];
        ip = result.inspect.NetworkSettings.IPAddress.toString();
        while (ip.length < 16) {
          ip += ' ';
        }
        _results.push(console.log("" + ip.blue + " " + result.container.Names[0].slice(1)));
      }
      return _results;
    });
  },
  inspect: function() {
    var name;
    if (args._.length !== 2) {
      console.error("Inspect requires container name or id");
      console.error(usage);
      process.exit(1);
    }
    name = args._[1];
    return docke.inspect(name, function(err, inspect) {
      if (err != null) {
        console.error(err);
        process.exit(1);
      }
      return console.log(inspect);
    });
  },
  logs: function() {
    var name, resize;
    if (args._.length !== 2) {
      console.error("Logs requires container name or id");
      console.error(usage);
      process.exit(1);
    }
    name = args._[1];
    resize = function() {
      return docke.resize(name, process.stdout.rows, process.stdout.columns, function() {});
    };
    process.stdout.on('resize', resize);
    resize();
    return docke.logs(name, function(err, stream) {
      if (err != null) {
        console.error(err);
        process.exit(1);
      }
      return stream.pipe(process.stdout);
    });
  },
  bash: function() {
    var name;
    if (args._.length !== 2) {
      console.error("Bash requires container name or id");
      console.error(usage);
      process.exit(1);
    }
    name = args._[1];
    return docke.exec(name, '/bin/bash', (function(_this) {
      return function(err, result) {
        return console.log(result);
      };
    })(this));
  },
  test: function() {
    var CTRL_P, CTRL_Q, isRaw, previousKey;
    return docke.test(function(err, stream) {
      if (err != null) {
        console.error(err);
        return process.exit(1);
      }
    });
    isRaw = process.isRaw;
    previousKey = null;
    CTRL_P = '\u0010';
    CTRL_Q = '\u0011';
    return docke.startExec('f388afb4856eafc217ff4883c0de3ed580fa4420547daea2ef88f848dbaa4891', function(err, stream) {
      console.log('1');
      if (err != null) {
        console.error(err);
        process.exit(1);
      }
      stream.pipe(process.stdout);
      process.stdin.resume();
      process.stdin.setEncoding('utf8');
      process.stdin.setRawMode(true);
      process.stdin.pipe(stream);
      return process.stdin.on('data', function(key) {
        if (previousKey === CTRL_P && key === CTRL_Q) {
          process.stdin.removeAllListeners();
          process.stdin.setRawMode(isRaw);
          process.stdin.resume();
          stream.end();
          process.exit();
        }
        return previousKey = key;
      });
    });
  }
};

command = args._[0];

if (commands[command] == null) {
  console.error("Unknown command " + command.cyan);
  console.error(usage);
  process.exit(1);
}

commands[command]();

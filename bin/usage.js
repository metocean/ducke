// Generated by CoffeeScript 1.8.0
var Ducke, args, cmds, command, commands, ducke, parameters, usage, usage_error;

require('colors');

Ducke = require('../src/ducke');

commands = require('./commands');

parameters = require('../src/parameters');

usage = "ðŸ‘¾\n\n  Usage: " + 'ducke'.cyan + " command parameters\n\n  Commands:\n  \n    ps        List all running containers\n    logs      Attach to container logs\n    run       Start a new container interactively\n    up        Start a new container\n    exec      Run a command inside an existing container\n  \n  Docker management:\n  \n    build     Build an image from a Dockerfile\n    rebuild   Build an image from a Dockerfile from scratch\n    inspect   Show details about containers\n    kill      Send SIGTERM to running containers\n    stop      Stop containers\n    rm        Delete containers\n    ls        List available images\n    orphans   List all orphaned images\n";

usage_error = (function(_this) {
  return function(message) {
    console.error();
    console.error(("  " + message).magenta);
    console.error();
    console.error(usage);
    return process.exit(1);
  };
})(this);

args = process.argv.slice(2);

ducke = new Ducke(parameters(args));

if (args.length === 0) {
  console.error(usage);
  return commands.status(ducke);
}

cmds = {
  ps: function() {
    if (args.length === 0) {
      return commands.ps(ducke);
    }
    return usage_error('ducke ps requires no arguments');
  },
  inspect: function() {
    if (args.length !== 0) {
      return commands.inspect(ducke, args);
    }
    return usage_error('ducke inspect requires container names');
  },
  logs: function() {
    if (args.length !== 0) {
      return commands.logs(ducke, args);
    }
    return usage_error('ducke logs requires container names');
  },
  run: function() {
    if (args.length > 0) {
      return commands.run(ducke, args[0], args.slice(1));
    }
    return usage_error('ducke run requires an image name');
  },
  up: function() {
    if (args.length > 1) {
      return commands.up(ducke, args[0], args.slice(1));
    }
    return usage_error('ducke up requires an image name and command');
  },
  exec: function() {
    if (args.length > 0) {
      return commands.exec(ducke, args[0], args.slice(1));
    }
    return usage_error('ducke exec requires a container name');
  },
  build: function() {
    if (args.length === 1) {
      return commands.build(ducke, args[0]);
    }
    return usage_error('ducke build requires an image name');
  },
  rebuild: function() {
    if (args.length === 1) {
      return commands.rebuild(ducke, args[0]);
    }
    return usage_error('ducke build requires an image name');
  },
  stop: function() {
    if (args.length !== 0) {
      return commands.stop(ducke, args);
    }
    return usage_error('ducke stop requires container names');
  },
  rm: function() {
    if (args.length !== 0) {
      return commands.rm(ducke, args);
    }
    return usage_error('ducke rm requires container names');
  },
  kill: function() {
    if (args.length !== 0) {
      return commands.kill(ducke, args);
    }
    return usage_error('ducke kill requires container names');
  },
  ls: function() {
    if (args.length === 0) {
      return commands.ls(ducke);
    }
    return usage_error('ducke ls requires no arguments');
  },
  orphans: function() {
    if (args.length === 0) {
      return commands.orphans(ducke);
    }
    return usage_error('ducke orphans requires no arguments');
  }
};

command = args[0];

args.shift();

if (cmds[command] != null) {
  return cmds[command]();
}

usage_error("" + command + " is not a known ducke command");
